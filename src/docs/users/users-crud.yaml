path:
  /api/users/:
    post:
      tags:
        - Users
      summary: Create user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: success
                  _id:
                    type: string
                    description: User ID
                    example: 5f7f7b7b7b7b7b7b7b7b7b7
        '400':
          description: Invalid input
          
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: success
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

  /api/users/{uid}/:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a user by their ID
      parameters:
        - in: path
          name: uid
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: success
                  payload:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

    put:
      tags:
        - Users
      summary: Update user by ID
      description: Update a user's details using their ID
      parameters:
        - in: path
          name: uid
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createUser'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: User updated
                  payload:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

    delete:
      tags:
        - Users
      summary: Delete user by ID
      description: Delete a user using their ID
      parameters:
        - in: path
          name: uid
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: success
        '400':
          description: Invalid input

components:
  schemas:
    Users:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email
        password:
          type: string
          description: User's password
        role:
          type: string
          description: User's role
        pets:
          type: array
          description: User's pets
          items:
            type: string
        __v:
          type: integer
          description: User version
      example:
        _id: 5f7b1b7b7b7b7b7b7b7b7b7b
        first_name: John
        last_name: Doe
        email: johndoe@gmail.com
        password: johndoe
        role: admin
        pets: []
        __v: 0

requestBodies:
  createUser:
    type: object
    properties:
      first_name:
        type: string
        description: User's first name
      last_name:
        type: string
        description: User's last name
      email:
        type: string
        description: User's email
      password:
        type: string
        description: User's password
    example:
      first_name: John
      last_name: Doe
      email: johndoe@gmail.com
      password: johndoe

# path:
#   /api/users:
#     post:
#       tags:
#         - users
#       summary: Create user
#       description: Create user
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/requestBodies/createUser'
#       responses:
#         '201':
#           description: successful operation
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   status:
#                     type: string
#                     description: List of users
#                     example: success
#                   _id:
#                     type: string
#                     description: User ID
#                     example: 5f7f7b7b7b7b7b7b7b7b7b7
#           '400':
#             description: Invalid status value
#   /api/users:
#     get:
#       tags:
#         - users
#       summary: Get all users
#       description: Get all users
#       operationId: getUsers
#       responses:
#         '200':
#           description: successful operation
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   status:
#                     type: string
#                     description: List of users
#                     example: success
#                   payload:
#                     type: array
#                     items:
#                       $ref: '#/components/schemas/User'
#         '400':
#           description: Invalid status value
#   /api/users/{uid}:
#     get:
#       tags:
#         - users
#       summary: Get user by ID
#       description: Get user by ID
#       parameters:
#         - in: path
#           name: uid
#           required: true
#           description: User ID
#           schema:
#             type: string
#       responses:
#         '200':
#           description: successful operation
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   status:
#                     type: string
#                     description: List of users
#                     example: success
#                   payload:
#                     $ref: '#/components/schemas/User'
#         '400':
#           description: Invalid status value
#     put:
#       tags:
#         - Users
#       summary: Update user by ID
#       description: Update user by ID
#       parameters:
#         - in: path
#           name: uid
#           required: true
#           description: User ID
#           schema:
#             type: string
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/requestBodies/updateUser'
#       responses:
#         '200':
#           description: OK
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   status:  
#                     type: string
#                     description: Status of the request
#                     example: User updated
#                   payload:
#                     $ref: '#/components/schemas/User'
#         '400':
#           description: Invalid status value
#     delete:
#       tags:
#         - Users
#       summary: Delete user by ID
#       description: Delete user by ID
#       parameters:
#         - in: path
#           name: uid
#           required: true
#           description: User ID
#           schema:
#             type: string
#           description: User ID
#       responses:
#         '200':
#           description: OK
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties:
#                   status:  
#                     type: string
#                     description: Status of the request
#                     example: success
#         '400':
#           description: Invalid status value

# components:
#   schemas:
#     User:
#       type: object
#       properties:
#         _id:
#           type: ObjectId
#           description: User ID
#         fisrt_name:
#           type: string
#           description: User first name
#         last_name:
#           type: string
#           description: User last name
#         email:
#           type: string
#           description: User email
#         password:
#           type: string
#           description: User password
#         role:
#           type: string
#           description: User role
#         pets:
#           type: array
#           description: User pets
#         __v:
#           type: integer
#           description: User version
#       example:
#         _id: 5f7b1b7b7b7b7b7b7b7b7b7b
#         fisrt_name: John
#         last_name: Doe
#         email: johndoe@gmail.com
#         password: johndoe
#         role: admin
#         pets: []
#         __v: 0

# requestBodies:
#   createUser:
#     type: object
#     properties:
#       first_name:
#         type: string
#         description: User first name
#       last_name:
#         type: string
#         description: User last name
#       email:
#         type: string
#         description: User email
#       password:
#         type: string
#         description: User password
#     example:
#       first_name: John
#       last_name: Doe
#       email: johndoe@gmail.com
#       password: johndoe