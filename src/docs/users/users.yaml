paths:
  /api/users:
    post:
      tags:
        - Users
      summary: Create user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: success
                  _id:
                    type: string
                    description: User ID
                    example: 5f7f7b7b7b7b7b7b7b7b7b7
        '400':
          description: Invalid input
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: success
                  payload:
                      $ref: '#/components/schemas/Users'
        '400':
          description: Invalid input
  /api/users/{uid}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a user by their ID
      parameters:
        - in: path
          name: uid
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: success
                  payload:
                    $ref: '#/components/schemas/Users'
        '400':
          description: Invalid input
    put:
      tags:
        - Users
      summary: Update user by ID
      description: Update a user's details using their ID
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateUsers'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: User updated
                  payload:
                    $ref: '#/components/schemas/Users'
        '400':
          description: Invalid input
    delete:
      tags:
        - Users
      summary: Delete user by ID
      description: Delete a user using their ID
      parameters:
        - in: path
          name: uid
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Operation status
                    example: success
                  message:
                    type: string
                    description: User deleted
                    example: User deleted successfully
        '400':
          description: Invalid input
  /api/users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/registerUser'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the request
                    example: success
                  payload:
                    $ref: '#/components/schemas/Users'
        '400':
          description: Invalid status value
  /api/users/login:
    post:
      tags:
        - Users
      summary: User login
      description: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/loginUser'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the request
                    example: success
                  token:
                    type: string
                    description: Authentication token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid status value
  /api/users/current:
    get:
      tags:
        - Users
      summary: Get current user
      description: Get current user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the request
                    example: success
                  users:
                    $ref: '#/components/schemas/Users'
        '400':
          description: Invalid status value

components:
  schemas:
    Users:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email
        password:
          type: string
          description: User's password
        role:
          type: string
          description: User's role
        pets:
          type: array
          description: User's pets
          items:
            type: string
        __v:
          type: integer
          description: User version
      example:
        _id: 5f7b1b7b7b7b7b7b7b7b7b7
        first_name: John
        last_name: Doe
        email: johndoe@gmail.com
        password: johndoe
        role: admin
        pets: []
        __v: 0
        
  requestBodies:
    createUser:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email
        password:
          type: string
          description: User's password
      example:
        first_name: John
        last_name: Doe
        email: johndoe@gmail.com
        password: johndoe
    updateUsers:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email
      example:
        first_name: John
        last_name: Doe
        email: johndoe@gmail.com
    registerUser:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email
        password:
          type: string
          description: User's password
      example:
        first_name: John
        last_name: Doe
        email: johnDoe@gmail.com
        password: securePassword123
    loginUser:
      type: object
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
      example:
        email: johndoe@gmail.com
        password: johndoe